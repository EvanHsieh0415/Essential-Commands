plugins {
	id 'groovy'
	id 'java-gradle-plugin'
	id 'fabric-loom' version '0.7-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "1.2.1"
	id 'com.matthewprenger.cursegradle' version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	modImplementation "me.lucko:fabric-permissions-api:${project.permissions_api_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 11
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

import com.modrinth.minotaur.TaskModrinthUpload
task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
	Map env = getenv()

	onlyIf {
		// Only attempt to run this task if the MODRINTH variable is set in .env, otherwise SKIP it
		env.containsKey("MODRINTH")
	}

	token = env.get("MODRINTH") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
	projectId = modrinth_project_id
	versionNumber = project.version // Will fail if Modrinth has this version already
	// On fabric, use 'remapJar' instead of 'jar'

	uploadFile = jar.outputs.getFiles().asPath // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	addGameVersion(minecraft_version) // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
	changelog = project.file('./changelog.md').getText('UTF-8')
	addLoader('fabric')

//	curseforge {
//		apiKey = env.get("CURSEFORGE") as String
//		project {
//			id = 475964
//			releaseType = 'release'
//			changelogType = 'markdown'
//			changelog = new File('./changelog.md').getText('UTF-8')
//			relations {
//				requiredLibrary 'fabric'
//	//			requiredDependency 'fabric-permissions-api-v0'
//			}
//			addGameVersion(minecraft_version)
//		}
//
//		options {
//			forgeGradleIntegration = false
//		}
//	}
}
//curseforge475964 // Begin the cursegradle task. Replacing ID with the id you set on the cursegradle config.



def static getenv(path = ".env") {
	def env = [:]

	def file = new File(path)
	if (file.exists()) {
		file.eachLine { line ->
			def (name, value) = line.tokenize("=")
			env[name.trim()] = value.trim()
		}
	}
	return env
}
