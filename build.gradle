plugins {
	id 'groovy'
	id 'java-gradle-plugin'
	id 'fabric-loom' version '0.7-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "1.2.1"
	id 'com.matthewprenger.cursegradle' version "1.4.0"
	id "com.github.breadmoirai.github-release" version "2.2.12"
}

allprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'idea'

	group = project.maven_group
	String full_version = "${project.mod_version}-mc${project.minecraft_version}"
	version = full_version
	archivesBaseName = "${project.mod_id}"

	sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11

	// Declare dependencies
	dependencies {
		// Fabric
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// Mods
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
//		modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
		modImplementation "me.lucko:fabric-permissions-api:${project.permissions_api_version}"

		// Code Quality
		compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
		testImplementation "org.junit.jupiter:junit-jupiter-api:${project.junit_jupiter_version}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${project.junit_jupiter_version}"

		// JIJ Dependencies
		modApi 	"me.lucko:fabric-permissions-api:${project.permissions_api_version}"
		include	"me.lucko:fabric-permissions-api:${project.permissions_api_version}"
		modApi 	'eu.pb4:placeholder-api-ec:1.0.1+1.16'
		include 'eu.pb4:placeholder-api-ec:1.0.1+1.16'
		modImplementation group: 'net.devtech', name: 'grossfabrichacks', version: '6.1'
		include group: 'net.devtech', name: 'grossfabrichacks', version: '6.1'

		// Subprojects
		subprojects.each {
			implementation project(":${it.name}")
			include project("${it.name}:") // nest within distribution
		}
	}

	// Perform tests using the JUnit test suite
	test {
		useJUnitPlatform()
	}

	// Produce a sources distribution
	java {
		withSourcesJar()
	}

	// Add the licence to all distributions
	tasks.withType(Jar).configureEach {
		it.from rootProject.file('LICENCE')
	}

	// Process any resources
	processResources {
		inputs.property 'id', project.mod_id
		inputs.property 'name', project.mod_name
		inputs.property 'version', project.version

		// fabric.mod.json
		filesMatching('fabric.mod.json') {
			expand(['id': project.mod_id, 'name': project.mod_name, 'version': project.version])
		}
	}

	// Add any additional repositories
	repositories {
		mavenCentral()
		mavenLocal()
		maven { name 'Fabric'; url 'https://maven.fabricmc.net/' }
//		maven { name 'TerraformersMC'; url 'https://maven.terraformersmc.com/' }
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		maven { url 'https://maven.nucleoid.xyz' }

		// GrossFabricHacks
		maven { url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/' }

		// Used by FabricPlaceholderAPI
		flatDir {
			dirs 'libs'
		}
	}

}


tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release = 11
}



//jar {
//	from("LICENSE") {
//		rename { "${it}_${project.archivesBaseName}"}
//	}
//}

// Define how packages are published
publishing {
	// Declare all publications
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.mod_id
			// Main
			artifact(remapJar) { builtBy remapJar }
			// Sources
			artifact(sourcesJar) {
				builtBy remapSourcesJar

			}
		}
	}
	Map env = getenv()
	// Add repositories to publish to
	repositories {
		// GitHub Packages (https://pkg.github.com)
		maven {
			name 'GitHub'
			url "https://maven.pkg.github.com/${project.github_repo}"
			credentials {
				username env.get('GITHUB_ACTOR')
				password env.get('GITHUB_TOKEN')
			}
		}
	}
}



import com.github.breadmoirai.githubreleaseplugin.GithubReleaseExtension
import com.modrinth.minotaur.TaskModrinthUpload
task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
	description 'Uploads all Modrinth projects'
	group 'upload'

	Map env = getenv()

	onlyIf {
		// Only attempt to run this task if the MODRINTH variable is set in .env, otherwise SKIP it
		env.containsKey("MODRINTH")
	}

	token = env.get("MODRINTH") // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
	projectId = modrinth_project_id
	versionNumber = project.version // Will fail if Modrinth has this version already
	versionType = project.version.contains('alpha') ? 'alpha' : project.version.contains('beta') ? 'beta' : 'release'

	// On fabric, use 'remapJar' instead of 'jar'

	uploadFile = jar.outputs.getFiles().asPath // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	project.mr_game_versions.split(',').each { addGameVersion it } // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
	changelog = getChangelog()
	addLoader('fabric')

	if (project.mr_relations_required) project.mr_relations_required.split(',').each { addDependency it, 'required' }
	if (project.mr_relations_optional) project.mr_relations_optional.split(',').each { addDependency it, 'optional' }
	if (project.mr_relations_incompatible) project.mr_relations_incompatible.split(',').each { addDependency it, 'incompatible' }

}
//curseforge475964 // Begin the cursegradle task. Replacing ID with the id you set on the cursegradle config.
curseforge {
	Map env = getenv()
	apiKey = env.get("CURSEFORGE") as String//changelog = new File('./changelog.md').getText('UTF-8')

	// Declare all projects
	//noinspection GroovyAssignabilityCheck
	project {
		// Set the project id
		id = project.cf_project_id
		// Set the release type
		releaseType = project.version.contains('alpha') ? 'alpha' : project.version.contains('beta') ? 'beta' : 'release'
		// Set the release notes
		changelog = "For a list of changes, please refer to https://github.com/${project.github_repo}/releases/tag/${project.version}"
		// Add all supported game versions
		project.cf_game_versions.split(',').each { addGameVersion it }
		// Add the main artifact
		mainArtifact(remapJar) { displayName = "${project.version}" }

		// Add any additional artifacts
		addArtifact sourcesJar
		addArtifact jar
		subprojects.each {
			addArtifact it.remapJar
			addArtifact it.sourcesJar
			addArtifact it.jar
		}
		// Add any dependencies
		relations {
			if (project.cf_relations_required) project.cf_relations_required.split(',').each { requiredDependency it }
			if (project.cf_relations_optional) project.cf_relations_optional.split(',').each { optionalDependency it }
			if (project.cf_relations_embedded) project.cf_relations_embedded.split(',').each { embeddedLibrary it }
			if (project.cf_relations_tools) project.cf_relations_tools.split(',').each { tool it }
			if (project.cf_relations_incompatible) project.cf_relations_incompatible.split(',').each { incompatible it }
		}
	}

	// Configure other options
	options {
		forgeGradleIntegration = false
	}
}

tasks.getByName("githubRelease").each { task -> configure(task) {
	group = "upload"
}}
githubRelease {
	Map env = getenv()
	group = "upload"
	token env.get("GITHUB") as String // This is your personal access token with Repo permissions
	// You get this from your user settings > developer settings > Personal Access Tokens
	owner project.gh_owner // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
	repo project.gh_repo // by default this is set to your project name
	tagName project.version // by default this is set to "v${project.version}"
	targetCommitish "1.16" // by default this is set to "master"
	releaseName project.version // Release title, by default this is the same as the tagName
	body getChangelog() // by default this is empty
	draft false // by default this is false
	prerelease false // by default this is false
	releaseAssets jar.destinationDirectory.getAsFileTree().matching {
		include "**/*${project.version}.jar"
//		include "**/*${project.mod_version}-sources.jar"
	}// this points to which files you want to upload as assets with your release
	//jar.outputs.getFiles().asPath//
	overwrite false // by default false; if set to true, will delete an existing release with the same tag and name
	dryRun false // by default false; you can use this to see what actions would be taken without making a release
	apiEndpoint "https://api.github.com" // should only change for github enterprise users
	client // This is the okhttp client used for http requests
}


def static getenv(path = ".env") {
	def env = [:]

	def file = new File(path)
	if (file.exists()) {
		file.eachLine { line ->
			def (name, value) = line.tokenize("=")
			env[name.trim()] = value.trim()
		}
	}
	return env
}

def getChangelog() {
	try {
		return new File('./changelog.md').getText('UTF-8')

	} catch (FileNotFoundException e) {
		logger.warn('./changelog.md not found.')
	}
	return "null";
}
